Given two strings s and t, return the number of distinct 
subsequences
 of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.

 

Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from s.
rabbbit
rabbbit
rabbbit
Example 2:

Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from s.
babgbag
babgbag
babgbag
babgbag
babgbag
 

Constraints:

1 <= s.length, t.length <= 1000
s and t consist of English letters.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
using memo
--------
class Solution {
    int helper(int i,int j,string &s,string &t,vector<vector<int>>&dp)
    {
        if(j < 0) return 1;
        if(i < 0) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        //if match then we can take that index or skip that index

        if(s[i] == t[j]) return dp[i][j] = helper(i-1,j-1,s,t,dp)+helper(i-1,j,s,t,dp);
        return dp[i][j] = helper(i-1,j,s,t,dp);
    }
public:
    int numDistinct(string s, string t) 
    {
        int n = s.length();
        int m = t.length();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return helper(n-1,m-1,s,t,dp);
    }
};
----------------------------------------------------------------------------------------------------------
using tabulation
-----------------------
class Solution {
public:
    int numDistinct(string s, string t) 
    {
        int n = s.length();
        int m = t.length();
        vector<vector<unsigned long long>>dp(n+1,vector<unsigned long long>(m+1,0));

        //whole 0th col for every row will be 1
        for(int i = 0; i <= n; i++) dp[i][0] = 1;
        /*
        //for the 0th row everybody will be 0
        for(int i = 1; i <= m; i++) dp[0][i] = 0;*/

        for(int i = 1; i <= n; i++)
        {
            for(int j = 1; j <= m; j++)
            {
                if(s[i-1] == t[j-1]) 
                {
                    dp[i][j] = dp[i-1][j-1]+dp[i-1][j];
                }
                else  
                    dp[i][j] = dp[i-1][j];
            }
        }
        return dp[n][m];
    }
};
----------------------------------------------------------------------------------------------------------------
using space optimization(part1)
-------------------------------
class Solution {
public:
    int numDistinct(string s, string t) 
    {
        int n = s.length();
        int m = t.length();
        vector<unsigned long long>prev_row(m+1,0),curr_row(m+1);
        prev_row[0] = curr_row[0] = 1;

        for(int i = 1; i <= n; i++)
        {
            for(int j = 1; j <= m; j++)
            {
                if(s[i-1] == t[j-1]) 
                {
                    curr_row[j] = prev_row[j-1]+prev_row[j];
                }
                else  
                    curr_row[j] = prev_row[j];
            }
            prev_row = curr_row;
        }
        return prev_row[m];
    }
};
----------------------------------------------------------------------------------------
space optimization(part2)
----------------------------
class Solution {
public:
    int numDistinct(string s, string t) 
    {
        int n = s.length();
        int m = t.length();
        vector<unsigned long long>curr_row(m+1,0);
        curr_row[0] = 1;

        for(int i = 1; i <= n; i++)
        {
            for(int j = m; j >= 1; j--)
            {
                if(s[i-1] == t[j-1]) 
                {
                    curr_row[j] = curr_row[j-1]+curr_row[j];
                }
            }
        }
        return curr_row[m];
    }
};
