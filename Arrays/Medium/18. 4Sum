T.C:O(N^3)
S.C:(NO OF QUADRUPLES)
---------------------------------
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) 
    {
      int n = nums.size();
      vector<vector<int>>ans;
      sort(nums.begin(),nums.end());

      for(int i = 0; i <= n-4; i++)
      {
          if(i > 0 && nums[i] == nums[i-1]) continue; // to avoid repetations

          for(int j = i+1;j <= n-3; j++)
          {
             if(j > i+1 && nums[j] == nums[j-1]) continue; // to avoid repetations

             int l = j+1;
             int r = n-1;

             while(l < r)
             {
                long long sum = nums[i]; // if you do sum = nums[i] + nums[j] + nums[l] + nums[r] it will give you an overflow to avod it do the sum like this
                sum+= nums[j];
                sum+= nums[l];
                sum+= nums[r];
                if(sum < target) l++;
                else if(sum > target) r--;
                else
                {
                    vector<int>temp = {nums[i],nums[j],nums[l],nums[r]};
                    ans.push_back(temp);
                    l++,r--;
                    while(l < r && nums[l] == nums[l-1]) l++; // to avoid repetations
                    while(l < r && nums[r] == nums[r+1]) r--; // to avoid repetations
                }
             }
          }
      }
      return ans;
    }
};
