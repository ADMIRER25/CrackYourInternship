T.C: O(N^2)
S.C: O(NO OF TRIPLETS)
---------------------------------------------------------------
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans;
        
        for(int i = 0; i <= n-3; i++)
        {
           if(i > 0  && nums[i] == nums[i-1]) continue; // to avoid repetation

           int need = -nums[i];
           int l = i+1;
           int r = n-1;
           while(l < r) // l<=r is not because we can't take same element twice
           {
               int sum = nums[l] + nums[r];
               if(sum < need) l++;
               else if(sum > need) r--;
               else
               {
                   vector<int>temp = {nums[i],nums[l],nums[r]};
                   ans.push_back(temp);
                   l++,r--;
                   while(l < r && nums[l] == nums[l-1]) l++; // to avoid repetation
                   while(l < r && nums[r] == nums[r+1]) r--; // to avoid repetation
               }
           }
        }
        return ans;
    }
};
