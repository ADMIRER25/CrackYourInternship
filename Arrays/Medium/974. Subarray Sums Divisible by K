T.C: O(N)
S.C:O(K)
----------------------------------------

class Solution {
public:
//k = 7 given 
    //array:       2     -6       3       1      2       8       2       1        1
    //sum  :0      2     -4      -1       0      2       10      12      13       14
//remainder:(0,1) (2,1) (3,1)   (6,1)    (0,2)  (2,2)   (3,2)   (5,1)   (6,2)    (0,3)
//count:                                   1     1+1    1+1+1          1+1+1+1  1+1+1+1+2


//if remainder is -ve then consider it like this: kn - y = kn - y + k - k = k(n-1) + (k - y) so k(n-1) part is divisible by k and remainder in k-y which is +ve


    int subarraysDivByK(vector<int>& nums, int k)
    {
        unordered_map<int,int>mp; // remainder,frequency 

        int sum = 0,count = 0;
        mp.insert({0,1});

        int n = nums.size();
        for(int i = 0; i < n; i++)
        {
            sum += nums[i];
            int remainder = sum % k;
            
            if(remainder < 0) remainder += k; //remainder is negative

            if(mp.find(remainder) != mp.end())
            {
                count += mp[remainder];
                mp[remainder]++;
            }
            else 
            {
                mp.insert({remainder,1});
            }
        }
        return count;
    }
};
