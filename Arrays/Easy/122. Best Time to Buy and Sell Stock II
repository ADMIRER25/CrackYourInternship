using memoization
-------------------
class Solution {
    int helper(vector<int>& prices,int ind,int buy,vector<vector<int>>&dp)
    {
        if(ind == prices.size()) return 0;
        
        if(dp[ind][buy] != -1) return dp[ind][buy];
        int profit;
        if(buy == 1) // then we are allowed to buy
        {
            profit = max(-prices[ind] + helper(prices,ind+1,0,dp), 0 + helper(prices,ind+1,1,dp));
        }
        else // we are allowed to sell only or skip 
        {
            profit = max(prices[ind] + helper(prices,ind+1,1,dp),0+helper(prices,ind+1,0,dp));
        }
        return dp[ind][buy] = profit;
    }
public:
    int maxProfit(vector<int>& prices) 
    {
       int n = prices.size();
       vector<vector<int>>dp(n,vector<int>(2,-1));
       return helper(prices,0,1,dp);
    }
};
---------------------------------------------------------------------------------------------------
using tabulation
-----------------------
class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
       int n = prices.size();
       vector<vector<int>>dp(n+1,vector<int>(2,0));

       int profit;
       for(int ind = n-1; ind >= 0; ind--)
       {
           // we have two choices either buy or not buy 
           for(int buy = 1; buy >= 0; buy--)
           {
                if(buy == 1) // then we are allowed to buy
                {
                    profit = max(-prices[ind] + dp[ind+1][0], 0 + dp[ind+1][1]);
                }
                else // we are allowed to sell only or skip 
                {
                    profit = max(prices[ind] + dp[ind+1][1], 0+dp[ind+1][0]);
                }
                dp[ind][buy] = profit;
           }
       }
       return dp[0][1];
    }
};
-------------------------------------------------------------------------------------------------
using space optimization
----------------------------
class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
       int n = prices.size();
       int prev0 = 0;
       int prev1 = 0;

       int profit;
       for(int ind = n-1; ind >= 0; ind--)
       {
           // we have two choices either buy or not buy 
           for(int buy = 1; buy >= 0; buy--)
           {
                if(buy == 1) // then we are allowed to buy
                {
                    profit = max(-prices[ind] + prev0, 0 + prev1);
                    prev1 = profit;
                }
                else // we are allowed to sell only or skip 
                {
                    profit = max(prices[ind] + prev1, 0+prev0);
                    prev0 = profit;
                }
           }
       }
       return prev1;
    }
};
