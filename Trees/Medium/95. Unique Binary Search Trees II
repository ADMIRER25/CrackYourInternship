/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    vector<TreeNode*> helper(int st,int end)
    {
        vector<TreeNode*>ans;
        if(st > end) 
        {
            ans.push_back(NULL);
            return ans;
        }
        for(int i = st; i <= end; i++)
        {
            vector<TreeNode*>left_nodes,right_nodes;
            left_nodes = helper(st,i-1);
            right_nodes = helper(i+1,end);
            
            for(auto l:left_nodes)
            {
                for(auto r:right_nodes)
                {
                    TreeNode* node = new TreeNode(i);
                    node->left = l;
                    node->right = r;
                    ans.push_back(node);
                }
            } 
           // cout << endl;
        }
        
        return ans;
    }
public:
    vector<TreeNode*> generateTrees(int n) 
    {
       return helper(1,n);
    }
};
