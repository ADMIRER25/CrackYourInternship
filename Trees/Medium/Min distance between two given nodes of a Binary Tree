class Solution{
    public:

    bool Solve(Node* root , Node* &ans , int n1 , int n2) {

        if(root == NULL) return false;

        bool leftAns = Solve(root -> left , ans , n1 , n2);
        bool rightAns = Solve(root -> right , ans , n1 , n2);

        if((leftAns == true || rightAns == true ) && (root -> data == n1 || root -> data == n2)){
            ans = root;
            return true;
        }
        if(root -> data == n1 || root -> data == n2)
            return true;
        if(leftAns == true && rightAns == true) {
            ans = root;
            return true;
        }
        if(leftAns == true || rightAns == true)
            return true;
        else
            return false;

    }

    Node* LCA(Node* root ,int n1 ,int n2 ) {

        Node* ans = NULL;

        Solve(root , ans , n1 , n2);

        return ans;
    }

    int findDistance(Node* root, int target, int distance) {
        if (root == NULL)
            return -1;

        if (root->data == target)
            return distance;

        int leftDistance = findDistance(root->left, target, distance + 1);
        int rightDistance = findDistance(root->right, target, distance + 1);

        if (leftDistance > 0)
            return leftDistance;
        else
            return rightDistance;
    }

    int findDist(Node* root, int a, int b) {

        //special case
        if(a == b) return 0;

        Node* lca = LCA(root, a, b);

        int d1 = findDistance(lca, a, 0);
        int d2 = findDistance(lca, b, 0);

        return d1 + d2;
    }
};
