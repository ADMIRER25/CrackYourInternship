/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
  void helper(TreeNode *node,TreeNode *&CheckNode,TreeNode *&def1,TreeNode* &def2)
  {
    if(!node) return;
    
    helper(node->left,CheckNode,def1,def2);
    if(CheckNode->val > node ->val && !def1)
    {
      def1 = CheckNode;
      def2 = node;
    }
    else if(CheckNode->val > node ->val)
    {
      def2 = node;
    }
    CheckNode = node ;
    helper(node->right,CheckNode,def1,def2);
  }
public:
    void recoverTree(TreeNode* root) 
    {
      TreeNode* CheckNode = new TreeNode(INT_MIN);// try to use intmin in all cases 
      TreeNode *def1,*def2;
      def1 = def2 = NULL;
      
      helper(root,CheckNode,def1,def2);
      swap(def1->val,def2->val);
    }
};
