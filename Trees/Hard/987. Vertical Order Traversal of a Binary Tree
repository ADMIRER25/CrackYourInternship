/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
  void helper(vector<vector<int>>&ans,TreeNode *root,int v,int l)
  {
    
    
    
    
  }
    vector<vector<int>> verticalTraversal(TreeNode* root) 
    {
       vector<vector<int>>ans;
       map<int,map<int,multiset<int>>> mp; 
       queue<pair<TreeNode*,pair<int,int>>> q;
       q.push({root,{0,0}});
      while(q.size())
      {
        auto it = q.front();
        q.pop();
        TreeNode* node = it.first;
        int verticle = it.second.first;
        int level = it.second.second;
        mp[verticle][level].insert(node -> val);
        if(node ->left ) q.push({node->left,{verticle-1,level+1}});
        if(node ->right) q.push({node ->right,{verticle+1,level+1}});
      }
      for(auto vert : mp)
      {
        vector<int>temp;
         for(auto lev : vert.second)
         {
           temp.insert(temp.end(),lev.second.begin(),lev.second.end());
         }
        ans.push_back(temp);
      }
      return ans;
    }
};
