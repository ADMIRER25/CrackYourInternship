bool isBipartite(int n, vector<int>adj[]){
        // Code here
        queue<int> q;
        vector<int> color(n, -1);
        for(int i=0; i<n; i++)
        {
            if(color[i]==-1)    //When the node is unvisited
            {
                q.push(i);
                color[i] = 0;
                while(!q.empty())
                {
                    int node = q.front();
                    q.pop();
                    for(auto itr : adj[node])
                    {
                        if(color[itr]==-1 && color[node]==0)
                        {
                            q.push(itr);    
                            color[itr] = 1;
                        }
                        else if(color[itr]==-1 && color[node]==1)
                        {
                            color[itr] = 0;
                            q.push(itr);
                        }
                        if(color[itr] == color[node])
                            return false;
                    }
                }
            }
            else    //When node is visited
            {
                for(auto itr : adj[i])
                {
                    if(color[itr]!=-1)
                    {
                        if(color[itr]==color[i])
                            return false;
                    }
                    else 
                    {
                        if(color[i]==0)
                            color[itr] = 1;
                        else if(color[i]==1)
                            color[itr] = 0;
                    }
                }
            }
        }
        return true;
    }
