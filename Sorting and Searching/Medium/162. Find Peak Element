A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
 

Constraints:

1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
nums[i] != nums[i + 1] for all valid i.
--------------------------------------------------------------------------------------
tc:O(logn)
sc:O(1)
---------------------------------------------------------------------------------------
class Solution {
public:
    int findPeakElement(vector<int>& nums) 
    {
        int n = nums.size();
        if(n == 1) return 0;

        if(nums[0] > nums[1]) return 0;
        if(nums[n-1] > nums[n-2]) return n-1;

        //if this two condition not occur then we can eliminate two index

        int l = 1,r = n-2;
        int ans;
        while(l <= r)
        {
            int mid = l +(r-l)/2;
            //checking the mid if it is the peak index or not 
            if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1])
            {
                ans = mid;
                break;
            }

            //if mid is on the incresing curve then we can say that peak is on the right
            else if(nums[mid] > nums[mid-1]) l = mid+1;

            //if mid is on the decresing curve then we can say that peak is on the left if(nums[mid] < nums[mid +1])
            else r = mid-1;
        }
        return ans;
    }
};
