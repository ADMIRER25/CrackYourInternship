Given an array of n distinct integers. The task is to check whether reversing any one sub-array can make the array sorted or not. If the array is already sorted or can be made sorted by reversing any one subarray, print “Yes“, else print “No“.

Examples: 

Input : arr [] = {1, 2, 5, 4, 3}
Output : Yes
By reversing the subarray {5, 4, 3}, the array will be sorted.

Input : arr [] = { 1, 2, 4, 5, 3 }
Output : No
-----------------------------------
t.c:O(n)
s.c:O(1)
-----------------------------------
#include <bits/stdc++.h>
using namespace std;

bool sortArr(int a[], int n)
{
	int x = -1;
	int y = -1;

	for (int i = 0; i < n - 1; i++) {
		if (a[i] > a[i + 1]) {
			if (x == -1) {
				x = i;
			}
			y = i + 1;
		}
	}

	if (x != -1) {
		reverse(a + x, a + y + 1);
		for (int i = 0; i < n - 1; i++) {
			if (a[i] > a[i + 1]) {
				return false;
				return 0;
			}
		}
	}

	return true;
}

// Driver Program
int main()
{
	int arr[] = { 1, 2, 5, 4, 3 };
	int n = sizeof(arr) / sizeof(arr[0]);

	sortArr(arr, n) ? (cout << "Yes" << endl)
					: (cout << "No" << endl);
	return 0;
}
--------------------------------------------------------------------------
t.c:O(n)
S.c:O(1)
--------------------
// C++ program to check whether reversing a sub array
// make the array sorted or not
#include<bits/stdc++.h>
using namespace std;

// Return true, if reversing the subarray will sort t
// he array, else return false.
bool checkReverse(int arr[], int n)
{
	if (n == 1)
		return true;

	// Find first increasing part
	int i;
	for (i=1; i < n && arr[i-1] < arr[i]; i++);
	if (i == n)
		return true;

	// Find reversed part
	int j = i;
	while (j < n && arr[j] < arr[j-1])
	{
		if (i > 1 && arr[j] < arr[i-2])
			return false;
		j++;
	}

	if (j == n)
		return true;

	// Find last increasing part
	int k = j;

	// To handle cases like {1,2,3,4,20,9,16,17}
	if (arr[k] < arr[i-1])
	return false;

	while (k > 1 && k < n)
	{
		if (arr[k] < arr[k-1])
			return false;
		k++;
	}
	return true;
}

// Driver Program
int main()
{
	int arr[] = {1, 3, 4, 10, 9, 8};
	int n = sizeof(arr)/sizeof(arr[0]);
	checkReverse(arr, n)? cout << "Yes" : cout << "No";
	return 0;
}

