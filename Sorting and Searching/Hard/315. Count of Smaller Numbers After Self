Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].

Example 1:
Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.
Example 2:

Input: nums = [-1]
Output: [0]
Example 3:

Input: nums = [-1,-1]
Output: [0,0]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
------------------------------------------------
T.c:(nlogn)
S.c:O(n)
-------------------------------------------------
class Solution {
    void merge(vector<pair<int,int>>&v,vector<int>&ans,int l,int mid,int h)
    {
        vector<pair<int,int>>left,right;
        int i,j,k;
        for(i = l; i <= mid; i++) left.push_back(v[i]);
        for(j = mid + 1; j <= h; j++) right.push_back(v[j]);

        i = 0, j = 0,k = l;
        while(i < left.size() && j < right.size())
        {
            if(left[i].first <= right[j].first)
            {
                ans[left[i].second] += j;
                v[k++] = left[i++];
            }
            else 
            {
                v[k++] = right[j++];
            }
        }
        while(i < left.size()) 
        {
            ans[left[i].second] += j;
            v[k++] = left[i++];
        }
        while(j < right.size())  v[k++] = right[j++];
    }
    void mergesort(vector<pair<int,int>>&v,vector<int>&ans,int l,int h)
    {
        if(l < h)
        {
            int mid = l + (h-l)/2;
            mergesort(v,ans,l,mid);
            mergesort(v,ans,mid+1,h);
            merge(v,ans,l,mid,h);
        }
    }
public:
    vector<int> countSmaller(vector<int>& nums) 
    {
        int n = nums.size();
        vector<int>ans(n,0);
        vector<pair<int,int>>v;

        for(int i = 0; i < n; i++) v.push_back({nums[i],i});

        mergesort(v,ans,0,n-1);
        return ans;
    }
};
