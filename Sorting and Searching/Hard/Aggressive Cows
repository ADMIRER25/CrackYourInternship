You are given an array consisting of n integers which denote the position of a stall. You are also given an integer k which denotes the number of aggressive cows. You are given the task of assigning stalls to k cows such that the minimum distance between any two of them is the maximum possible.
The first line of input contains two space-separated integers n and k.
The second line contains n space-separated integers denoting the position of the stalls.

Example 1:
Input:
n=5 
k=3
stalls = [1 2 4 8 9]
Output:
3
Explanation:
The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows, in this case, is 3, 
which also is the largest among all possible ways.
Example 2:

Input:
n=5 
k=3
stalls = [10 1 2 7 5]
Output:
4
Explanation:
The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows, in this case, is 4,
which also is the largest among all possible ways.
Your Task:
Complete the function int solve(), which takes integer n, k, and a vector stalls with n integers as input and returns the largest possible minimum distance between cows.

Constraints:
2 <= n <= 10^5
2 <= k <= n
0 <= stalls[i] <= 10^9
-------------------------------------------------------------------------------
Time Complexity: O(n*log(10^9)).
Auxiliary Space: O(1).
-------------------------------------------------------------------------------
class Solution {
    int helper(vector<int>&nums,int mini_dist)
    {
        int cow_no = 1, j = 0;// j the position of the 1st cow 
        
        //if two stalles dist is < mini_dist then we can't place a cow there
        for(int i = 1; i < nums.size(); i++)
        {
            if(nums[i] - nums[j] >= mini_dist) // then we can place cow there 
            {
                cow_no++;
                j = i;
            }
        }
        return cow_no;
    }
public:

    int solve(int n, int k, vector<int> &stalls) {
    
        // if we sort the stalls then the distance between two consicutive positions will be minimum
        sort(stalls.begin(),stalls.end());
        
        int size= stalls.size();
        
        int maxi = stalls[size-1],mini = stalls[0];
        
        int l = 1, h = maxi-mini;
        
        while(l <= h)
        {
            int mid = l + (h-l)/2;
            
            // now we have to assign cows with that minimum stalls distance which is mid;
            int total_cow = helper(stalls,mid);
            
            if(total_cow < k) h = mid-1;
            else l = mid+1;
        }
        return h;
    }
};
