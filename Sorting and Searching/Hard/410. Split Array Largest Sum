Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

Example 1:

Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
Example 2:

Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 106
1 <= k <= min(50, nums.length)
--------------------------------------------------------------------------------------------------------------------------
T.c:O(nlogn)
s.c:O(1)
---------------------------------------------------------------------------------------------------------------------------
class Solution {
      int func(vector<int>&nums,int n,int maxi_book_hold)
    {
        int student = 1,books_allocated = 0;
        
        for(int i = 0; i < n; i++)
        {
            if(books_allocated + nums[i] > maxi_book_hold)
            {
                student++;
                books_allocated = nums[i];
            }
            else 
            {
               books_allocated += nums[i];
            }
        }
        return student;
    }
    
    int findPages(vector<int>& a,int m) 
    {
        int n = a.size();
        if(n < m ) return -1;
        int maxi = INT_MIN;
        int sum = 0;
        //find the low and high
        for(int i = 0; i < n;i++)
        {
            maxi = max(maxi,a[i]);
            sum += a[i];
        }
        
        int low = maxi; //so that all other books can be allocated to the other students
        int high = sum; // if there is only 1 student then he will hold all the books 
        
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            
            int student = func(a,n,mid);
            
            if(student > m) low = mid + 1;//we are able to allocate books in students which is greter than required no of studetns 
            else high = mid -1;
        }
        return low;
    }
public:
    int splitArray(vector<int>& nums, int k)
    {
        return findPages(nums,k);
    }
};
